// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

import {IEntryPoint} from "account-abstraction/interfaces/IEntryPoint.sol";
import {EntryPoint} from "account-abstraction/core/EntryPoint.sol";
import {MagicSpend} from "../../src/MagicSpend/MagicSpend.sol";
import {Test, console2} from "forge-std/Test.sol";
import "account-abstraction/core/Helpers.sol";

contract Simulate is Test {
    IEntryPoint entryPoint = IEntryPoint(0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789);

    function test() public {
        bytes memory data =
            hex"1fad948c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d53eb5203e367bbdd4f72338938224881fc501ab00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b129e9e8391c42efb2227e671780c624dcdde0c5000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005c86d000000000000000000000000000000000000000000000000000000001067288b00000000000000000000000000000000000000000000000000000000001df24c00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434fcd5be000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001544c0C8Ac4d7B5469CB7e0d2D74923D4eA43fA3B67000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065cd688f00000000000000000000000000000000000000000000000000000000000000417fa185627edbb6accdc4079ba682b9d42208216a8cc62b06834b184b1e3cd8e832126fb1b9a1bfeef8ff21af5a80263836ec32fafbb7bcdb520c3d421f131ed41bc0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140d197445622096e561028f1710564e8db488424027b8a3a96b3b1d3789e480c697637b6ba0ec0df6798e5e0358de417d7555dca5119ae9ebc5065da7b3b35ee62000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        (bool success, bytes memory result) = address(entryPoint).call(data);
        console2.log(string(result));
        if (result.length > 0) {
            assembly {
                revert(add(32, result), mload(result))
            }
        }
        // assert(success);
    }
}
